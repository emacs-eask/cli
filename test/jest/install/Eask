;; -*- mode: eask; lexical-binding: t -*-

(package "mini.pkg.1"
         "0.0.1"
         "Minimal test package")

(website-url "https://github.com/emacs-eask/cli/tree/master/test/fixtures/mini.pkg.1")
(keywords "test" "local")

(package-file "mini.pkg.1.el")

(files "files/*.el")

(script "test" "echo \"Have a nice day!~ ;)\"")
(script "extra" "echo :")
(script "info" "eask info")

(eask-defcommand mini-test-1 "Test command 1." (message "Test 1"))
(eask-defcommand mini-test-2 "Test command 2." (message "Test 2"))
(eask-defcommand mini-test-3
  "Test command 3."
  (message "Test 3: %s" eask-rest))

(source 'gnu)
(source 'melpa)
;; (source 'jcs-elpa)

(depends-on "emacs" "26.1")
(depends-on "f")
(depends-on "s")
(depends-on "fringe-helper")

;; File install
(depends-on "mini.pkg.2" :file "./mini.pkg.2")

;; VC install
(when (version<= "29.1" emacs-version)
  ;; XXX: This takes too long to test, disable for now.
  ;;(depends-on "msgu" :vc "https://github.com/jcs-elpa/msgu")
  )

;; Try out
(depends-on "indent-control" :try)
(depends-on "auto-rename-tag" :try "https://raw.githubusercontent.com/emacs-vs/auto-rename-tag/refs/heads/master/auto-rename-tag.el")

;; Recipe install
(depends-on "watch-cursor"
            :repo "jcs-elpa/watch-cursor" :fetcher 'github)
;; (depends-on "organize-imports-java"
;;             :repo "jcs-elpa/organize-imports-java"
;;             :fetcher 'github
;;             :files '(:defaults "sdk" "default"))

(development
 (depends-on "ert-runner"))

(setq network-security-level 'low)  ; see https://github.com/jcs090218/setup-emacs-windows/issues/156#issuecomment-932956432


(defun package-dir-info ()
  "Find package information for a directory.
The return result is a `package-desc'."
  (cl-assert (derived-mode-p 'dired-mode))
  (let* ((desc-file (package--description-file default-directory)))
    (if (file-readable-p desc-file)
        (with-temp-buffer
          (insert-file-contents desc-file)
          (package--read-pkg-desc 'dir))
      (catch 'found
        (let ((files (or (and (derived-mode-p 'dired-mode)
                              (dired-get-marked-files))
                         (directory-files-recursively default-directory "\\.el\\'"))))
          ;; We sort the file names in lexicographical order, to ensure
          ;; that we check shorter file names first (ie. those further
          ;; up in the directory structure).
          (dolist (file (sort files))
            ;; The file may be a link to a nonexistent file; e.g., a
            ;; lock file.
            (when (file-exists-p file)
              (with-temp-buffer
                (insert-file-contents file)
                ;; When we find the file with the data,
                (when-let* ((info (ignore-errors (package-buffer-info))))
                  (setf (package-desc-kind info) 'dir)
                  (throw 'found info))))))
        (error "No .el files with package headers in `%s'" default-directory)))))
